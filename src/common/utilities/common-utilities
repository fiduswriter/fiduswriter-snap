#!/bin/sh

SNAP_CURRENT="$(realpath -s "$SNAP/../current")"
SNAP_DATA_CURRENT="$(realpath -s "$SNAP_DATA/../current")"
export SNAP_CURRENT
export SNAP_DATA_CURRENT

stdout_is_a_terminal()
{
	[ -t 1 ]
}

stderr_is_a_terminal()
{
	[ -t 2 ]
}

run_command()
{
	# Ideally we could output these all on one line, but that only works with a
	# terminal. Support both.
	if stdout_is_a_terminal; then
		printf "%s... " "$1"
	else
		echo "$1..."
	fi

	shift
	if output="$("$@" 2>&1)"; then
		echo "done"
		return 0
	else
		echo "error"
		echo "$output"
		return 1
	fi
}

wait_for_command()
{
	message="$1"
	shift
	if ! "$@"; then
		# Ideally we could output these all on one line, but that only works with a
		# terminal. Support both.
		if stdout_is_a_terminal; then
			printf "%s... " "$message"
		else
			echo "$message..."
		fi
		while ! "$@"; do
			sleep 1
		done
		echo "done"
	fi
}

get_previous_snap_version()
{
	snapctl get private.snap.version
}

set_previous_snap_version()
{
	snapctl set private.snap.version="$1"
}

enable_maintenance_mode()
{
	if run_command "Enabling maintenance mode" occ -n maintenance:mode --on; then
		# The opcache might cache changes for one second. Wait for two to be safe.
		sleep 2
		return 0
	fi
	return 1
}

disable_maintenance_mode()
{
	if run_command "Disabling maintenance mode" occ -n maintenance:mode --off; then
		# The opcache might cache changes for one second. Wait for two to be safe.
		sleep 2
		return 0
	fi
	return 1
}

version_less_than()
{
	if [ "$1" = "$2" ]; then
		return 1
	fi

	printf "%s\n%s" "$1" "$2" | sort -VC
}
